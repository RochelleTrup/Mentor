.wrapper {
    display: flex;  /* Set the wrapper as a flex container */
    flex-direction: row
    
}

@media (max-width: 768px) { /* 768px is just an example, adjust as required */
    .wrapper {
        flex-direction: column; /* Stack children vertically */
    }
    .block1, .blocks-2-and-3 {
        flex-basis: 100%; /* Occupy full width */
    }
    .blocks-2-and-3 {
        grid-template-rows: auto auto; /* Let blocks 2 and 3 decide their own height */
    }
}


.block1 {
    flex: 0 0 70%;
    background-image: url('background faded.png');
    background-size: cover;
    background-position: center;
    display: flex;
    justify-content: center; 
    align-items: center;     
    flex-direction: column;  
    padding-top: 30px;
}




.section {
    border-bottom: 2px solid #000;  
    padding-bottom: 16px;  
    margin-bottom: 16px; 
    
    width: 70%;
    text-align: center;  /* Center the text horizontally */

    /* Center the content vertically */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}



.blocks-2-and-3 {
    flex: 0 0 30%;  /* This will occupy the remaining 30% of the parent width */
    width: 100%; 
    display: grid;  /* Make it a grid container to stack block 2 and block 3 vertically */
    grid-template-rows: 500px 500px;  /* Adjust percentages as required. Here block2 takes 60% of parent height and block3 takes 40% */
    grid-gap: 0; /* This removes any space between the grid items */
    margin: 0;
    padding: 0;
}



.block2 {
    /* Adjust width and height if necessary */
    width: 100%;
    height: 100%;
    flex: 0 0 30%;
   
}

.block2 img {
    width: 100%;          /* Make the image width match the container width */
    height: 100%;         /* Make the image height match the container height */
    object-fit: contain;  /* This will scale the image to fit inside the container without cropping */
    object-position: center; /* This will center the image within its container. */
    display: block;      /* Remove default line height/margin around the image */
    
}


.block3 {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;  /* Align content to the top vertically */
    align-items: center;          /* Center horizontally */
    width: 100%;
    height: 100%;
    grid-template-rows: auto auto; 
    flex: 0 0 30%;
    padding-top: 0%;
    padding-bottom: 50px;
    
}

ul.list-unstyled {
    padding-left: 0;
    list-style-type: none;
}

.custom-button {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-top: 20px;
    padding: 6px 20px;
    font-size: 18px;
    font-weight: 600;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    background-color: #7a4ef1;
    color: #fdfdfd;
    transition: background-color 0.3s ease;
    width: 40%;
    text-align: center;  /* This will center the text inside the button */
}










